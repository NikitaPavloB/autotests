import logging
import pytest
import allure
import pytest_check as check
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.firefox import GeckoDriverManager
from pages.login.login_page import LoginPage


browser_name = "chrome"


# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞.
@pytest.fixture(scope="session")
def browser():
    if browser_name == "firefox":
        service = Service(executable_path=GeckoDriverManager().install())
        options = webdriver.FirefoxOptions()
        driver = webdriver.Firefox(service=service, options=options)
        print("\nüöÄ –ó–∞–ø—É—â–µ–Ω –±—Ä–∞—É–∑–µ—Ä: Firefox")
    else:
        service = Service(executable_path=ChromeDriverManager().install())
        options = webdriver.ChromeOptions()
        driver = webdriver.Chrome(service=service, options=options)
        print("\nüöÄ –ó–∞–ø—É—â–µ–Ω –±—Ä–∞—É–∑–µ—Ä: Chrome")

    # driver.maximize_window()
    yield driver
    driver.quit()
    print("\nüõë –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

# –•—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–¥–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤ (–Ω–æ –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)


_screenshot_made_per_test = {}


@pytest.hookimpl(hookwrapper=True, tryfirst=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    report = outcome.get_result()
    if report.when == "call" and report.failed:
        test_name = item.name

        # –ü—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –æ—à–∏–±–∫–∏, –Ω–æ –Ω–µ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        _screenshot_made_per_test[test_name] = True


# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–µ pytest-check, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç
def save_screenshot_on_check_fail(driver, description):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        screenshot_name = f"{description}_error_{timestamp}"

        screenshot = driver.get_screenshot_as_png()
        allure.attach(screenshot, name=screenshot_name, attachment_type=allure.attachment_type.PNG)
        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç '{screenshot_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏–∑ pytest-check!")

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ Allure, —á—Ç–æ–±—ã —à–∞–≥ –≤—ã–¥–µ–ª—è–ª—Å—è –∫—Ä–∞—Å–Ω—ã–º
        with allure.step(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {description}"):
            assert False, description  # –ü–æ–º–µ—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∫—Ä–∞—Å–Ω—ã–º, –Ω–æ —Ç–µ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è

    except Exception as e:
        if isinstance(e, AssertionError):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º assert False, description
            pass
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ pytest-check: {e}")


# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ –º–æ–¥—É–ª—è

@pytest.fixture(scope="module")
def login(browser):
    logging.info('–ó–∞–ø—É—Å—Ç–∏–ª–∏ —Ñ–∏–∫—Å—Ç—É—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    page = LoginPage(browser)
    page.go_to_site()
    page.enter_login("1test_np")
    page.enter_password("Test123$")
    page.click_login_button()
    with allure.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'):
        if not check.equal(page.get_menu_text(),'–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª–∏:', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é'):
            save_screenshot_on_check_fail(browser, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å. –ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞')
    yield page  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ç–µ—Å—Ç—ã
